generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Product {
  id          String          @id @default(cuid())
  name        String
  description String
  price       Float
  discountPrice Float?
  material      String
  category_id String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  status      ProductStatus   @default(DRAFT)
  colors      ProductColor[]
  assets      ProductAsset[]
}

model ProductColor {
  id        String         @id @default(cuid())
  color     String         // Example: "Red", "Blue", etc.
  product   Product        @relation(fields: [productId], references: [id] ,onDelete: Cascade)
  productId String

  assets    ProductAsset[] // Images for the specific color
  sizes     ProductVariant[]
}

model ProductVariant {
  id         String         @id @default(cuid())
  size       VariantsValues
  stock      Int
  color      ProductColor   @relation(fields: [colorId], references: [id],onDelete: Cascade)
  colorId    String

  OrderItem OrderItem[]
}

model ProductAsset {
  id        String        @id @default(cuid())
  asset_url  String
  product   Product?      @relation(fields: [productId], references: [id],onDelete: Cascade)
  productId String?
  type     AssetType @default(IMAGE)
  color     ProductColor? @relation(fields: [colorId], references: [id],onDelete: Cascade)
  colorId   String?
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  productCount Int @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ProductStatus {
  DRAFT
  PUBLISHED
}
enum AssetType {
  IMAGE
  VIDEO
}

enum VariantsValues {
  SIZE_5  // UK/India Size 5 (US Men 6, US Women 5, EU 38)
  SIZE_6  // UK/India Size 6 (US Men 7, US Women 6, EU 39)
  SIZE_7  // UK/India Size 7 (US Men 8, US Women 7, EU 40)
  SIZE_8  // UK/India Size 8 (US Men 9, US Women 8, EU 41)
  SIZE_9  // UK/India Size 9 (US Men 10, US Women 9, EU 42)
  SIZE_10 // UK/India Size 10 (US Men 11, US Women 10, EU 43)
  SIZE_11 // UK/India Size 11 (US Men 12, US Women 11, EU 44)
  SIZE_12 // UK/India Size 12 (US Men 13, US Women 12, EU 47)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  mobile        String          @unique
  mobileVerified DateTime?
  image         String?
  accounts      Account[]
  password      String
  role          UserType        @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]
}

enum UserType {
  ADMIN
  USER
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Order {
  id          String          @id @default(cuid())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  items       OrderItem[]     // Join table for order items
  total       Float
  status      OrderStatus
  fulfillment OrderFulfillment

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderItem {
  id             String         @id @default(cuid())
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        String
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId String
  quantity       Int
  priceAtOrder   Float // Store price at the time of order
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum OrderFulfillment {
  PENDING     // Added for initial state
  SHIPPED
  DELIVERED
  RETURNED
}

 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}